/**
 * Plantilla de inicio de sesi칩n con formulario y encabezado.
 *
 * Este componente muestra un formulario de inicio de sesi칩n con campos de entrada para
 * el correo y la contrase침a, adem치s de un 칤cono y t칤tulo en la parte superior.
 * Es adaptable a diferentes tama침os de pantalla.
 */

import 'package:flutter/material.dart';
import '../molecules/atomic_icon_with_text.dart';
import '../organism/Atomic_form.dart';

/// Widget de plantilla para el inicio de sesi칩n.
///
/// Contiene un formulario con los campos necesarios y un bot칩n de env칤o.
/// Permite manejar la autenticaci칩n a trav칠s de un callback.
class AtomicTemplateLogin extends StatefulWidget {
  /// Funci칩n que se ejecuta al enviar el formulario con el email y la contrase침a.
  final void Function(String email, String password) onLogin;

  /// Constructor de [AtomicTemplateLogin].
  const AtomicTemplateLogin({super.key, required this.onLogin});

  @override
  _AtomicTemplateLoginState createState() => _AtomicTemplateLoginState();
}

class _AtomicTemplateLoginState extends State<AtomicTemplateLogin> {
  /// Clave global para la validaci칩n del formulario.
  final _formKey = GlobalKey<FormState>();

  /// Controlador para el campo de correo electr칩nico.
  final TextEditingController _emailController = TextEditingController();

  /// Controlador para el campo de contrase침a.
  final TextEditingController _passwordController = TextEditingController();

  /// Env칤a el formulario si la validaci칩n es correcta.
  ///
  /// Verifica que los campos no est칠n vac칤os y ejecuta la funci칩n `onLogin`
  /// proporcionada en el widget padre.
  void _submit() {
    if (_formKey.currentState?.validate() ?? false) {
      final email = _emailController.text.trim();
      final password = _passwordController.text.trim();

      if (email.isNotEmpty && password.isNotEmpty) {
        widget.onLogin(email, password);
      } else {
        print("Error: correo o contrase침a vac칤os");
      }
    }
  }

  @override
  Widget build(BuildContext context) {
    final double screenWidth = MediaQuery.of(context).size.width;
    final bool isWideScreen = screenWidth > 600; // Responsive para tablets

    return Center(
      child: Padding(
        padding: EdgeInsets.symmetric(horizontal: isWideScreen ? 80 : 24, vertical: 32),
        child: Column(
          mainAxisSize: MainAxisSize.min,
          children: [
            // 游늷 칈cono con t칤tulo centrado
            const AtomicIconText(
              size: IconTextSize.medium,
              text: "Bienvenido",
              icon: Icons.lock,
              iconColor: Colors.blueAccent,
              textColor: Colors.black,
            ),
            const SizedBox(height: 24),

            // 游늷 Formulario de inicio de sesi칩n
            AtomicForm(
              key: _formKey,
              fieldCount: 3,
              onSubmit: (values) {},
              buttonText: 'Iniciar sesi칩n',
              labels: const ['Nombre', 'Contrase침a', 'Correo'],
            ),
          ],
        ),
      ),
    );
  }
}
